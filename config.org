#+TITLE: Configuration
#+AUTHOR: Bruno Bonatto

This is my private DOOM Emacs configuration file.
It tangles, on save, all src blocks into =config.el=

* Basic functionality

** Literate configuration
Disable auto tangling from =config.org=.
#+begin_src elisp
(remove-hook 'org-mode-hook #'+literate-enable-recompile-h)
#+end_src

Mapping for easier tangling.
#+begin_src elisp
(map! :desc "Tangle all src blocks in current file" :mode org-mode :n "SPC m E" #'org-babel-tangle)
#+end_src

** Identification

#+begin_src elisp
(setq! user-full-name    "Bruno Bonatto"
      user-mail-address "bfbonatto@gmail.com")
#+end_src

** Font
Doom exposes five (optional) variables for controlling fonts. The three most important ones are:
+ =doom-font=.
+ =doom-variable-pitch-font=.
+ =doom-big-font=, which is used for =doom-big-font-mode=; for presentations and streaming.

They all accept either a font-spec, font string (="Input Mono-12"=), or xlfd font string. you generally only need these two:
#+begin_example
(setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
      doom-variable-pitch-font (font-spec :family "sans" :size 13))
#+end_example

#+begin_src elisp
(setq! doom-font (font-spec :family "Fira Code" :size 12 :weight 'normal))
#+end_src

** Theme
There are two ways to load a theme. Both assume the theme is installed and available. You can either set =doom-theme= or manually load a theme with the =load-theme= function.
Some good themes are:
+ ='doom-tomorrow-night=
+ ='doom-one=
+ ='doom-gruvbox=
+ ='doom-solarized-dark=

#+begin_src elisp
(setq! doom-theme 'doom-tomorrow-night)
#+end_src

** Line numbers
The style of line numbers, if set to =nil= line numbers are disable. For relative line numbers set this to ='relative=. To respect wrapped lines use ='visual=.

#+begin_src elisp
(setq! display-line-numbers-type 'visual)
#+end_src

** Pretty symbols.
#+begin_src elisp
(global-prettify-symbols-mode)
#+end_src

** Automatically sync paths
Automatically sync ='exec-path= variable with user's =$PATH=.

#+begin_src elisp
(defun sync-path ()
  "Set up Emacs' `exec-path' and PATH environment variable to match the user's shell."
  (interactive)
  (let ((path-from-shell
         (replace-regexp-in-string "[ \t\n]*$" "" (shell-command-to-string "$SHELL --login -c 'echo $PATH'"))))
  (setenv "PATH" path-from-shell)
  (setq! exec-path (split-string path-from-shell path-separator))))
(sync-path)
#+end_src

** Mac specific settings

+ Default dictionary is English.
+ Use the command key as meta key.

#+begin_src elisp
(if (eq system-type 'darwin)
  (setenv "DICTIONARY" "en_US")
  (setq! mac-option-key-is-meta nil)
  (setq! mac-command-key-is-meta t)
  (setq! mac-command-modifier 'meta)
  (setq! mac-option-modifier nil))
#+end_src

** Magit

Extra key-mapping to push local changes to the current remote branch.
#+begin_src elisp
(map! :desc "Push to remote" :n "SPC g p" #'magit-push-current-to-pushremote)
#+end_src

** Windows

#+begin_src elisp
(map! :desc "Move cursor to COUNT-th window left of the current one"  :i "C-h" #'evil-window-left)
(map! :desc "Move cursor to COUNT-th window right of the current one" :i "C-l" #'evil-window-right)
(map! :desc "Move cursor to COUNT-th window up of the current one"    :i "C-k" #'evil-window-up)
(map! :desc "Move cursor to COUNT-th window down of the current one"  :i "C-j" #'evil-window-down)

(setq! evil-split-window-below  t
       evil-vsplit-window-right t)
#+end_src

** Extra mappings

#+begin_src elisp
(map! :desc "Calendar"            :n "SPC o c" #'calendar)
(map! :desc "Calculator"          :n "SPC o C" #'calc)
(map! :desc "Web Browser"         :n "SPC o w" #'eww)
(map! :desc "Dictionary Language" :n "SPC t S" #'ispell-change-dictionary)
#+end_src

* Discord

#+begin_src elisp
(require 'elcord)
(setq! elcord-use-major-mode-as-main-icon t)
(map! :desc "Discord presence" :n "SPC t d" #'elcord-mode)
#+end_src


* Modeline
Using =doom-modeline=. Show battery status, clock, word count, project information and major mode icon. Don't show load average, minor mode information or buffer encoding.

#+begin_src elisp
(display-battery-mode)
(display-time)
(setq! doom-modeline-enable-word-count t
       display-time-day-and-date nil
       display-time-default-load-average nil
       display-time-load-average nil
       doom-modeline-project-detection 'auto
       doom-modeline-major-mode-icon t
       doom-modeline-minor-mode nil
       doom-modeline-buffer-encoding nil
       doom-modeline-continuous-word-count-modes '(markdown-mode org-mode))
#+end_src

* Org

#+begin_src elisp
(setq! org-directory "~/org/")
#+end_src

* Python

#+begin_src elisp
(add-hook! python-mode
  (rainbow-delimiters-mode-enable)
  (add-to-list 'prettify-symbols-alist '("int"    . 8484))
  (add-to-list 'prettify-symbols-alist '("float"  . 8477))
  (add-to-list 'prettify-symbols-alist '("in"     . 8712))
  (add-to-list 'prettify-symbols-alist '("inf"    . 8734))
  (add-to-list 'prettify-symbols-alist '("def"    . 402))
  (add-to-list 'prettify-symbols-alist '("True"   . 8868))
  (add-to-list 'prettify-symbols-alist '("False"  . 8869))
  (add-to-list 'prettify-symbols-alist '("not"    . 172))
  (add-to-list 'prettify-symbols-alist '("not in" . 8713)))
#+end_src

* Haskell

#+begin_src elisp
(add-hook! haskell-mode
  (add-to-list 'prettify-symbols-alist '("Int"  . 8484))
  (add-to-list 'prettify-symbols-alist '("elem" . 8712))
  (add-to-list 'prettify-symbols-alist '("not"  . 172))
  (add-to-list 'prettify-symbols-alist '("&&"   . 8743))
  (add-to-list 'prettify-symbols-alist '("||"   . 8744))
  (add-to-list 'prettify-symbols-alist '("\\"   . 955)))
#+end_src

* Coq

#+begin_src elisp
(add-hook! coq-mode :append
  (map! :desc "Toggle electric termination mode" :in "C-c C-;" #'proof-electric-terminator-toggle)
  (setq! coq-compile-before-require t))
#+end_src

* Project management

Hide uninmportant files

#+begin_src elisp
(after! projectile
    (add-to-list 'projectile-globally-ignored-file-suffixes ".lock")
    (add-to-list 'projectile-globally-ignored-directories "*.stack-work"))
#+end_src

* Extra info
Here are some additional functions/macros that could help you configure Doom:

- =`load!'= for loading external *.el files relative to this one
- =`use-package!'= for configuring packages
- =`after!'= for running code after a package has loaded
- =`add-load-path!'= for adding directories to the =`load-path'= , relative to this file. Emacs searches the =`load-path'= when you load packages with
  =`require'= or =`use-package'=.
- =`map!'= for binding new keys

To get information about any of these functions/macros, move the cursor over
the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
This will open documentation for it, including demos of how they are used.

You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
they are implemented.
